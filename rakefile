
directory 'build'

include_dirs_option = ' -I include/ '

# file dependencies don't go into namespaces!
# only tasks do

#desc 'code generation, flex thingy'
file 'src/lexer.c' => 'src/lr.l' do
    sh 'flex -t src/lr.l > src/lexer.c'
end

=begin
#desc 'compile each source file into object'
file 'build/count_words.o' => %w[build src/count_words.c include/counter.h] do
    sh "clang #{include_dirs_option} -o build/count_words.o -c src/count_words.c"
end

file 'build/counter.o' => %w[build src/counter.c include/counter.h include/lexer.h] do
    sh "clang #{include_dirs_option} -o build/counter.o -c src/counter.c"
end

file 'build/lexer.o' => %w[build src/lexer.c include/lexer.h] do
    sh "clang #{include_dirs_option} -o build/lexer.o -c src/lexer.c"
end
=end

def compile_a_file(source_file, header_files, out_dir)
  # add the file definition to the system
  out_object_file = out_dir + '/' + source_file.split('/')[-1].split('.')[0] + '.o'
  dependencies = [out_dir, source_file] + header_files
  # just strip the file name in the path to the header file
  header_dirs = header_files.map {|h| h.split('/')[0..-2] .join '/'} .select {|i| not i.empty?} .uniq

  #puts dependencies
  if header_dirs.empty?
    #puts "clang -o #{out_object_file} -c #{source_file}"
    file out_object_file => dependencies do
        sh "clang -o #{out_object_file} -c #{source_file}"
    end
  else
    #puts "clang #{header_dirs.map {|h| '-I'+h} .join ' '} -o #{out_object_file} -c #{source_file}"
    file out_object_file => dependencies do
        sh "clang #{header_dirs.map {|h| '-I'+h} .join ' '} -o #{out_object_file} -c #{source_file}"
    end
  end
end

compile_a_file('src/lexer.c', ['include/lexer.h'], 'build')
compile_a_file('src/counter.c', ['include/lexer.h', 'include/counter.h'], 'build')
compile_a_file('src/count_words.c', ['include/counter.h'], 'build')
=begin
could a rule do it?
but here each source file has different dependancy on headers..........
more discipline idea:
1. a src file has only 1 header with all its' dependencies
2. thus the header dependencies are put into these headers..
   one encodes them in rakefile
   or parses somehow
-- it seems as an unreasonable additional step, unnecessary file?
   no
   look at count_words, which uses the counter.o object -- it needs only the header of the object
   in general:
   1. the header is what the object provides to users
   2. internal dependencies of the object are included into its' source and not added to header

so, what is really done for build:
1. source.c file includes some headers -- that's the internal dependencies of the file,
   its' source.h file is not its' dependency, it is its' interface, the extern definitions or users
2. for building the source file depends on the internal headers,
   one should parse the file to get all dependency filenames
   and then where they are found? the actual dependency header file?
   and where is the link to the actual source of the dependecy?
   (I'm inclined to flatter, simpler system..)
   What does `include <foo.h>` says is "I use that object, whatever functions it provides -- include them".
   The source file could actually declare each function. but project-wise you just say "that object".
   Then project-wise you at least know the location of that object.
   It is constant thing.
   (It is the interface of the object, even if you build it with some test version of the object,
   the interface is the same.)
   So, the only question is how to define this dependency project-wise?
   In the build system with `-Iinclude_path` or in the filesystem paths and `#include "path/dep.h"`?
   I think for programming it should be kept explicitly directly in the code in the `#include` statements.
   Then the dir-names should be more specific than `src` and `include`.
3. In principle, separate `src_dependency.h` header is useful:
   * less lines to parse dependencies from
   * kind of cleaner maintenance?

In principle, the header system should show "interfaces of the system that's the most important!!!" as everybody says.
The dependency graph and stuff..
But parsing of headers or source files... Or of the GNU Makefile... Or even of rakefile...

What if put dependencies with symlinks in:
  ...
  src.c
  src_depns/*.h

then:
1. easy `rule` in rakefile for this
2. easy to see the project even with `tree` or similar stuff

OK, doing it.

#include <counter.h>
clang -I src/count_words.deps/ -c src/count_words.c -o count_words.o

and

#include "count_words.deps/counter.h"
clang -I src/ -c src/count_words.c -o count_words.o

both work

in any case the rule for rake should be simple
something like:

rule '.c' [build_dir] => '.deps/*.h' do |task|
    clang -I '.deps/' -c task.name -o build_dir/task_base_filename.o
end

-- yeah.. the problem is '.c' is rule for _target_file_, not a general task "to compile all these .c"
=end


desc 'building final binary'
file 'build/count_words' => %w[build build/count_words.o build/counter.o build/lexer.o] do
    sh "clang #{include_dirs_option} build/count_words.o build/lexer.o build/counter.o -lfl -o build/count_words"
end

#namespace 'foo' do
desc 'build everything up to count_words binary'
task 'count_words' => 'build/count_words'
#end


